Debugging

I relied on my full dominion game random tester, "testdominion.c" to find issues in the source code. "testdominion.c" is set up such that kingdom cards and number of players are random, and each move is semi-automated, such that the current player will attempt to play an action card, buy a valuable card based on the current treasure in hand, end turn, discard hand, and draw a new hand. The game loops through the player’s turns until one of the dominion win conditions is met. 
This file will primarily output the game state information about this game and the results of buys/actions, as opposed to passing/failing assert statements to debug results. However, when I was editing and testing other recently modified tests (for the final project) I found bugs in the card implementations. To debug these, I used the standard terminal gdb to skip to the location of the failing test condition. 
	In one specific example, Council Room (+4 cards, +1 buy, and each other player draws a card) was not adding 4 cards to the player's hand. As mentioned above, I used the debugger to locate the failing test case. I also used the debugger to check the current players pre- and post-Council Room hand counts and found out that the function council_roomEffect(...), which was meant to encapsulate the council_room call inside cardEffect(...), does not allow the player to draw all 4 cards if the current deckCount is less than 4 cards.
	
Agan's Principles:
Almost every single one of Agan's principles was noticeable over the course of the entire dominion debugging process, but I will discuss each principle in regards to the Council Room example:		
(1) Understand the System: I would certainly say, at this point in the dominion project, I have a stronger understanding of the system in debugging. The "dominion.c" file relies heavily on the playCard function, which calls cardEffect (which calls my council_roomEffect function) resulting in the player not drawing enough cards.
(2) Make it fail: I had to design a test case which would test the functionality of Council Room and every element of the card's effect. Some of the effects passed, post-Council Room hand count failed, however.
(3) Quit thinking and look: I actually had to stop thinking about what I should test for and what elements to isolate and just start running some tests.
(4) Divide and conquer: Council Room has many effects so I separated each element of the card and tested individually.
(5) Change one thing at a time: After finding the issue, I had to change the pre-conditions (hand count, deck count, etc.) one by one to ensure certain variables were not the cause of the bug. A smaller deck count appeared to be the cause of the differing hand count.
(6) Keep an audit trail: I made note of each aspect of the source code (and tester) I changed so I would know which variables had already been changed and what the results were. Additionally, text/gcov files discussing previous card tests (both from previous assignments and tests run on classmates code) proved beneficial in showing it was only my current implementation which had the bug.
(7) Check the plug: I made no assumptions about whether my tester was written properly or whether it was an issue with the dominion.c file. I started from the beginning: reran the tests and checked previous test results, my tester, and testing conditions.
(8) Get a fresh view: I did not ask anyone else about this bug, as it was not very difficult to isolate after putting some time in.
(9) If you didn't fix it, it isn’t fixed: I tested for and found one particular bug which occurred only in certain situations when Council Room is played. There undoubtedly are other bugs in playCard, cardEffect, and council_roomEffect, which aren’t fixed.

