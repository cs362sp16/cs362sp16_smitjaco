--- Running Random ADVENTURER Test ---
--- Tests Complete ---
File 'randomtestadventurer.c'
Lines executed:93.10% of 29
Creating 'randomtestadventurer.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2://#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        -:    9:#define MAX_TESTS 30
        -:   10:
        -:   11://This randomly tests Adventurer
        -:   12:
        1:   13:int main() {
        -:   14:
        1:   15:	  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   16:	       sea_hag, tribute, smithy};
        -:   17:
        -:   18:	  int i, players, player, handCount, deckCount, seed;
        -:   19:	  //struct gameState state;
        -:   20:	  struct gameState state;
        -:   21:
        1:   22:	  printf("--- Running Random ADVENTURER Test ---\n");
        -:   23:
        -:   24:	  // Actually set player variable
        1:   25:	  player = 0;
        -:   26:
       31:   27:	  for (i = 0; i < MAX_TESTS; i++) {
       30:   28:        int flag = 0;
       30:   29:	    players = rand() % 4;
       30:   30:	    seed = rand();
        -:   31:		
       30:   32:	    initializeGame(players, k, seed, &state);	//initialize Gamestate
        -:   33:
        -:   34:	    //Initiate valid state variables
       30:   35:		  state.deckCount[player] = rand() % MAX_DECK; //Pick random deck size out of MAX DECK size
       30:   36:		  state.discardCount[player] = rand() % MAX_DECK;
       30:   37:		  state.handCount[player] = rand() % MAX_HAND;
        -:   38:
        -:   39:
        -:   40:		  //Copy state variables
       30:   41:		  handCount = state.handCount[player];
       30:   42:		  deckCount = state.deckCount[player];
        -:   43:
        -:   44:		  //1 in 3 chance of making empty deck for coverage
       30:   45:		  if (seed % 3 == 0) {
        -:   46:
       13:   47:			state.deckCount[player] = 0;
        -:   48:		  } // 1 in 3 chance of adding 2 treasure cards to deck
       17:   49:		  else if ((seed - 1) %3 == 0) {
       10:   50:            state.deck[player][deckCount] = gold;
       10:   51:            state.deck[player][deckCount+1] = silver;
       10:   52:            state.deckCount[player] = deckCount+2;
       10:   53:            flag = 1;
        -:   54:		  }
        -:   55:
       30:   56:		  int cE = cardEffect(adventurer, 1, 1, 1, &state, 0);		//Run adventurer card
        -:   57:
       30:   58:		  if (cE != 0){
    #####:   59:		    printf("Failed (cE == 0) condition\n");
        -:   60:		  }
        -:   61:
       30:   62:		  if (flag == 1) {
       10:   63:		    if (!(state.handCount[player] == (handCount+2))){
    #####:   64:		       printf("Failed (currentHandCount = handCount+2) condition\n");
        -:   65:		    }
        -:   66:		  }
        -:   67:	  }
        -:   68:
        1:   69:	  printf("--- Tests Complete ---\n");
        -:   70:
        1:   71:	  return 0;
        -:   72:}
