--- Running Random SMITHY Test ---
--- Tests Complete ---
File 'randomtestcard.c'
Lines executed:93.33% of 30
Creating 'randomtestcard.c.gcov'

        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#define MAX_TESTS 20
        -:    9:
        -:   10://This randomly tests smithy
        -:   11:
        1:   12:int main() {
        -:   13:
        1:   14:	  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   15:	       sea_hag, tribute, smithy};
        -:   16:
        -:   17:	  int i, players, player, handCount, deckCount, seed;
        -:   18:	  //struct gameState state;
        -:   19:	  struct gameState state;
        -:   20:
        1:   21:	  printf("--- Running Random SMITHY Test ---\n");
        -:   22:
        -:   23:	  // Actually set player variable
        1:   24:	  player = 0;
        -:   25:
       21:   26:	  for (i = 0; i < MAX_TESTS; i++) {
       20:   27:        int flag = 0;
       20:   28:	    players = rand() % 4;
       20:   29:	    seed = rand();
        -:   30:
       20:   31:	    initializeGame(players, k, seed, &state);	//initialize Gamestate
        -:   32:
        -:   33:	    //Initiate valid state variables
       20:   34:		  state.deckCount[player] = rand() % MAX_DECK; //Pick random deck size out of MAX DECK size
       20:   35:		  state.discardCount[player] = rand() % MAX_DECK;
       20:   36:		  state.handCount[player] = rand() % MAX_HAND;
        -:   37:
        -:   38:		  //Copy state variables
       20:   39:		  handCount = state.handCount[player];
       20:   40:		  deckCount = state.deckCount[player];
        -:   41:
        -:   42:		  //1 in 3 chance of making empty deck for coverage
       20:   43:		  if (seed % 3 == 0) {
        8:   44:			state.deckCount[player] = 0;
        -:   45:		  } // 1 in 3 chance of ensuring 3 cards are ontop of deck -> go to current players hand
       12:   46:		  else if ((seed - 1) %3 == 0) {
        7:   47:            state.deck[player][deckCount] = adventurer;
        7:   48:            state.deck[player][deckCount+1] = gold;
        7:   49:            state.deck[player][deckCount] = gardens;
        7:   50:            state.deckCount[player] = deckCount+3;
        7:   51:            flag = 1;
        -:   52:		  }
        -:   53:
       20:   54:		  int cE = cardEffect(smithy, 1, 1, 1, &state, 0);		//Run adventurer card
        -:   55:
       20:   56:		  if (cE != 0){
    #####:   57:		    printf("Failed (cE == 0) condition\n");
        -:   58:		  }
       20:   59:		  if (flag == 1) {
        7:   60:		    if ( !(state.handCount[player] == (handCount+2)) ){     // Discard SMITHY, but draw 3 cards
    #####:   61:		      printf("Failed (currentHandCount = handCount+2) condition\n");
        -:   62:		    }
        -:   63:		  }
        -:   64:	  }
        -:   65:
        1:   66:	  printf("--- Tests Complete ---\n");
        -:   67:
        1:   68:	  return 0;
        -:   69:}
